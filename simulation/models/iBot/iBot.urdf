<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from /home/atharva/ros2/airbus_ws/src/Autonomous-Inspection-POC/simulation/models/iBot/iBot.urdf.xacro | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="iBot">
  <!--**************** DIFFERENTIAL DRIVE CONTROLLER *********************** -->
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="differential_drive_controller">
      <ros>
        <namespace>iBot</namespace>
        <remapping>/cmd_vel:=cmd_vel</remapping>
        <remapping>/odom:=odom</remapping>
      </ros>
      <update_rate>20.0</update_rate>
      <num_wheel_pairs>2</num_wheel_pairs>
      <odometry_frame>odom</odometry_frame>
      <left_joint>front_left_wheel_joint</left_joint>
      <right_joint>front_right_wheel_joint</right_joint>
      <wheel_separation>0.32</wheel_separation>
      <wheel_diameter>0.25</wheel_diameter>
      <left_joint>back_left_wheel_joint</left_joint>
      <right_joint>back_right_wheel_joint</right_joint>
      <wheel_separation>0.32</wheel_separation>
      <wheel_diameter>0.25</wheel_diameter>
      <max_wheel_torque>40</max_wheel_torque>
      <max_wheel_acceleration>5.0</max_wheel_acceleration>
      <publish_odom>true</publish_odom>
      <!-- robot_localization package publishes this transform -->
      <publish_odom_tf>false</publish_odom_tf>
      <!-- The robot_state_publisher package is often used to publish this transform -->
      <publish_wheel_tf>true</publish_wheel_tf>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>robot_footprint</robot_base_frame>
      <!-- <odometry_source>world</odometry_source> -->
    </plugin>
  </gazebo>
  <!-- ************************ CAMERA SENSOR ****************************** -->
  <gazebo reference="camera">
    <sensor name="camera_sensor" type="camera">
      <update_rate>30.0</update_rate>
      <always_on>1</always_on>
      <camera name="camera">
        <!-- <horizontal_fov>1.3962634</horizontal_fov> -->
        <horizontal_fov>1.2</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <distortion>
          <k1>0.0</k1>
          <k2>0.0</k2>
          <k3>0.0</k3>
          <p1>0.0</p1>
          <p2>0.0</p2>
          <center>0.5 0.5</center>
        </distortion>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <ros>
          <namespace>/iBot</namespace>
          <remapping>camera/image_raw:=/iBot/camera/image</remapping>
          <remapping>camera/camera_info:=/iBot/camera/image/camera_info</remapping>
        </ros>
        <camera_name>camera</camera_name>
        <frame_name>camera_frame</frame_name>
        <hack_baseline>0.07</hack_baseline>
      </plugin>
    </sensor>
  </gazebo>
  <!-- ************************* IMU SENSOR ******************************** -->
  <gazebo reference="imu">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu">
        <ros>
          <namespace>/iBot</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>
  <!-- ********************** JOINT STATE PUBLISHER ************************ -->
  <gazebo>
    <plugin filename="libgazebo_ros_joint_state_publisher.so" name="joint_state_publisher">
      <ros>
        <namespace>iBot</namespace>
        <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>30</update_rate>
      <joint_name>front_left_wheel_joint</joint_name>
      <joint_name>front_right_wheel_joint</joint_name>
      <joint_name>back_left_wheel_joint</joint_name>
      <joint_name>back_right_wheel_joint</joint_name>
    </plugin>
  </gazebo>
  <!-- ********** GAZEBO-ROS-FORCE PLUGIN FOR SIMULATING EDF THRUST ********** -->
  <gazebo>
    <plugin filename="libgazebo_ros_force.so" name="gazebo_ros_force">
      <ros>
        <namespace>iBot</namespace>
        <remapping>/gazebo_ros_force:=wrench</remapping>
      </ros>
      <update_rate>100</update_rate>
      <always_on>true</always_on>
      <link_name>robot_footprint</link_name>
      <force_frame>link</force_frame>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_ros_p3d.so" name="p3d_base_controller">
      <ros>
        <namespace>/iBot</namespace>
        <argument>odom:=ground_truth</argument>
      </ros>
      <always_on>true</always_on>
      <update_rate>50.0</update_rate>
      <body_name>robot_footprint</body_name>
      <gaussian_noise>0.01</gaussian_noise>
      <frame_name>world</frame_name>
      <xyz_offset>0 0 0</xyz_offset>
      <rpy_offset>0 0 0</rpy_offset>
    </plugin>
  </gazebo>
  <!-- <ros2_control name="GazeboSystem" type="system">
    <hardware>
      <plugin>gazebo_ros2_control/GazeboSystem</plugin>
    </hardware>
    <joint name='front_left_wheel_joint'>
      <command_interface name="position">
        <param name="min">-100</param>
        <param name="max">100</param>
      </command_interface>
      <state_interface name="position" />
      <state_interface name="velocity" />
      <state_interface name="effort" />
    </joint>
    <joint name='front_right_wheel_joint'>
      <command_interface name="position">
        <param name="min">-100</param>
        <param name="max">100</param>
      </command_interface>
      <state_interface name="position" />
      <state_interface name="velocity" />
      <state_interface name="effort" />
    </joint>
    <joint name='back_left_wheel_joint'>
      <command_interface name="position">
        <param name="min">-100</param>
        <param name="max">100</param>
      </command_interface>
      <state_interface name="position" />
      <state_interface name="velocity" />
      <state_interface name="effort" />
    </joint>
    <joint name='back_left_wheel_joint'>
      <command_interface name="position">
        <param name="min">-100</param>
        <param name="max">100</param>
      </command_interface>
      <state_interface name="position" />
      <state_interface name="velocity" />
      <state_interface name="effort" />
    </joint>
  </ros2_control>

  <gazebo>
    <plugin name="gazebo_ros2_control" filename="libgazebo_ros2_control.so">
      <parameters>/home/atharva/ros2/airbus_ws/src/Autonomous-Inspection-POC/simulation/config/iBot_joint_trajectory_controller.yaml</parameters>
    </plugin>
  </gazebo> -->
  <!-- ******************** BASE LINK ************************************** -->
  <link name="chassis">
    <collision name="collision">
      <origin rpy=" 0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.4 0.2 0.1"/>
      </geometry>
    </collision>
    <visual name="chassis_visual">
      <origin rpy=" 1.5707963267948966 0 0" xyz="0 -0 0"/>
      <geometry>
        <mesh filename="package://iBot/meshes/chassis3.obj"/>
      </geometry>
      <transparency>0</transparency>
      <cast_shadows>1</cast_shadows>
    </visual>
    <inertial>
      <origin rpy="1.5707963267948966 0 1.5707963267948966" xyz="0 0 0"/>
      <mass value="15"/>
      <!-- <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/> -->
      <inertia ixx="0.21250000000000005" ixy="0.0" ixz="0.0" iyy="0.25000000000000006" iyz="0.0" izz="0.06250000000000001"/>
    </inertial>
  </link>
  <!-- dummy link to take care of the below error -
  "The root link chassis has an inertia specified in the URDF, but KDL does not
  support a root link with an inertia.  As a workaround, you can add an extra
  dummy link to your URDF."
  <link name="dummy_link"-->
  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
  <!-- Define the center of the main robot chassis projected on the ground -->
  <link name="robot_footprint"/>
  <!-- The base footprint of the robot is located underneath the chassis -->
  <joint name="robot_footprint_joint" type="fixed">
    <!-- NOTE- joint's orign is defined w.r.t. parent's reference frame-->
    <origin rpy="0 0 0" xyz="0 0 0.15"/>
    <child link="chassis"/>
    <parent link="robot_footprint"/>
  </joint>
  <link name="back_left_wheel_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://iBot/meshes/wheel3.obj"/>
      </geometry>
      <transparency>0</transparency>
      <cast_shadows>1</cast_shadows>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.1" radius="0.125"/>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>10.0</mu>
            <mu2>5.0</mu2>
          </ode>
        </friction>
      </surface>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="7"/>
      <!-- <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/> -->
      <inertia ixx="2.369791666666667" ixy="0" ixz="0" iyy="2.369791666666667" iyz="0" izz="3.90625"/>
    </inertial>
  </link>
  <joint name="back_left_wheel_joint" type="revolute">
    <parent link="chassis"/>
    <child link="back_left_wheel_link"/>
    <origin rpy="0 0 0" xyz="-0.175 0.16000000000000003 -0.025"/>
    <limit effort="1000" lower="-1e+16" upper="1e+16" velocity="1000"/>
    <axis xyz="0 1 0"/>
    <dynamics damping="1.0" friction="1.0" spring_reference="0" spring_stiffness="0"/>
  </joint>
  <link name="back_right_wheel_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://iBot/meshes/wheel3.obj"/>
      </geometry>
      <transparency>0</transparency>
      <cast_shadows>1</cast_shadows>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.1" radius="0.125"/>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>10.0</mu>
            <mu2>5.0</mu2>
          </ode>
        </friction>
      </surface>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="7"/>
      <!-- <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/> -->
      <inertia ixx="2.369791666666667" ixy="0" ixz="0" iyy="2.369791666666667" iyz="0" izz="3.90625"/>
    </inertial>
  </link>
  <joint name="back_right_wheel_joint" type="revolute">
    <parent link="chassis"/>
    <child link="back_right_wheel_link"/>
    <origin rpy="0 0 0" xyz="-0.175 -0.16000000000000003 -0.025"/>
    <limit effort="1000" lower="-1e+16" upper="1e+16" velocity="1000"/>
    <axis xyz="0 1 0"/>
    <dynamics damping="1.0" friction="1.0" spring_reference="0" spring_stiffness="0"/>
  </joint>
  <link name="front_left_wheel_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://iBot/meshes/wheel3.obj"/>
      </geometry>
      <transparency>0</transparency>
      <cast_shadows>1</cast_shadows>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.1" radius="0.125"/>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>10.0</mu>
            <mu2>5.0</mu2>
          </ode>
        </friction>
      </surface>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="7"/>
      <!-- <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/> -->
      <inertia ixx="2.369791666666667" ixy="0" ixz="0" iyy="2.369791666666667" iyz="0" izz="3.90625"/>
    </inertial>
  </link>
  <joint name="front_left_wheel_joint" type="revolute">
    <parent link="chassis"/>
    <child link="front_left_wheel_link"/>
    <origin rpy="0 0 0" xyz="0.175 0.16000000000000003 -0.025"/>
    <limit effort="1000" lower="-1e+16" upper="1e+16" velocity="1000"/>
    <axis xyz="0 1 0"/>
    <dynamics damping="1.0" friction="1.0" spring_reference="0" spring_stiffness="0"/>
  </joint>
  <link name="front_right_wheel_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://iBot/meshes/wheel3.obj"/>
      </geometry>
      <transparency>0</transparency>
      <cast_shadows>1</cast_shadows>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.1" radius="0.125"/>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>10.0</mu>
            <mu2>5.0</mu2>
          </ode>
        </friction>
      </surface>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="7"/>
      <!-- <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/> -->
      <inertia ixx="2.369791666666667" ixy="0" ixz="0" iyy="2.369791666666667" iyz="0" izz="3.90625"/>
    </inertial>
  </link>
  <joint name="front_right_wheel_joint" type="revolute">
    <parent link="chassis"/>
    <child link="front_right_wheel_link"/>
    <origin rpy="0 0 0" xyz="0.175 -0.16000000000000003 -0.025"/>
    <limit effort="1000" lower="-1e+16" upper="1e+16" velocity="1000"/>
    <axis xyz="0 1 0"/>
    <dynamics damping="1.0" friction="1.0" spring_reference="0" spring_stiffness="0"/>
  </joint>
  <!-- ************************** CAMERA *************************** -->
  <link name="camera">
    <inertial>
      <origin rpy="1.5707963267948966 0 1.5707963267948966" xyz="0 0 0"/>
      <mass value="0.1"/>
      <!-- <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/> -->
      <inertia ixx="0.21250000000000005" ixy="0.0" ixz="0.0" iyy="0.25000000000000006" iyz="0.0" izz="0.06250000000000001"/>
    </inertial>
    <visual name="camera_visual">
      <origin rpy="0 0 1.5707963267948966" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://iBot/meshes/camera.obj"/>
      </geometry>
      <transparency>0</transparency>
      <cast_shadows>1</cast_shadows>
    </visual>
    <collision name="camera_colision">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
  </link>
  <joint name="camera_joint" type="fixed">
    <origin rpy="0 1.5707 0" xyz="0.17500000000000002 0 -0.025"/>
    <parent link="chassis"/>
    <child link="camera"/>
  </joint>
  <link name="camera_frame"/>
  <joint name="camera_frame_joint" type="fixed">
    <origin rpy="-1.5707963267948966 0 -1.5707963267948966" xyz="0.025 0 0"/>
    <parent link="camera"/>
    <child link="camera_frame"/>
  </joint>
  <!-- ************************** IMU *************************** -->
  <link name="imu">
    <inertial>
      <origin rpy="1.5707963267948966 0 1.5707963267948966" xyz="0 0 0"/>
      <mass value="0.1"/>
      <!-- <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/> -->
      <inertia ixx="0.21250000000000005" ixy="0.0" ixz="0.0" iyy="0.25000000000000006" iyz="0.0" izz="0.06250000000000001"/>
    </inertial>
    <visual name="imu_visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </visual>
    <collision name="imu_colision">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
  </link>
  <joint name="imu_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="chassis"/>
    <child link="imu"/>
  </joint>
  <gazebo reference="imu">
    <material>Gazebo/Red</material>
  </gazebo>
</robot>

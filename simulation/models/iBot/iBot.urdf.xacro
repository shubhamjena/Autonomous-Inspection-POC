<?xml version='1.0'?>

<robot name="iBot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:include filename="iBot.gazebo" />
  <!-- ************************ ROBOT CONSTANTS ****************************** -->
  <xacro:property name="chassis_length" value="0.4"/>
  <xacro:property name="chassis_width" value="0.2"/>
  <xacro:property name="chassis_height" value="0.1"/>
  <xacro:property name="wheel_radius" value="0.125"/>
  <xacro:property name="wheel_width" value="0.1"/>
  <xacro:property name="wheel_ygap" value="0.01"/>
  <xacro:property name="wheel_zoff" value="0.025"/>
  <xacro:property name="wheel_xoff" value="0.175"/>
  <xacro:property name="camera_length" value="0.05"/>
  <xacro:property name="camera_xoff" value="${(chassis_length/2-camera_length/2)}"/>
  <xacro:property name="camera_yoff" value="0"/>
  <xacro:property name="camera_zoff" value="-${(chassis_height/2-camera_length/2)}"/>
  <xacro:property name="imu_length" value="0.05"/>

  <!-- *******************INERTIAS ***************************************** -->
  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <!-- <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/> -->
      <inertia ixx="2.369791666666667" ixy="0" ixz="0" iyy="2.369791666666667" iyz="0" izz="3.90625" />
    </inertial>
  </xacro:macro>
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <!-- <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/> -->
      <inertia ixx="0.21250000000000005" ixy="0.0" ixz="0.0" iyy="0.25000000000000006" iyz="0.0" izz="0.06250000000000001" />
    </inertial>
  </xacro:macro>

  <!-- ******************** BASE LINK ************************************** -->
  <link name="chassis">

    <collision name="collision">
      <origin xyz="0 0 0" rpy=" 0 0 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>

    <visual name="chassis_visual">
      <origin xyz="0 -0 0" rpy=" ${pi/2} 0 0"/>
      <geometry>
        <mesh filename="package://iBot/meshes/chassis3.obj"/>
      </geometry>
      <transparency>0</transparency>
      <cast_shadows>1</cast_shadows>
    </visual>

    <xacro:box_inertia m="15" w="${chassis_width}" h="${chassis_height}" d="${chassis_length}"/>
  </link>

  <!-- dummy link to take care of the below error -
  "The root link chassis has an inertia specified in the URDF, but KDL does not
  support a root link with an inertia.  As a workaround, you can add an extra
  dummy link to your URDF."
  <link name="dummy_link"-->

  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
  <!-- Define the center of the main robot chassis projected on the ground -->
  <link name="robot_footprint"/>

  <!-- The base footprint of the robot is located underneath the chassis -->
  <joint name="robot_footprint_joint" type="fixed">
    <!-- NOTE- joint's orign is defined w.r.t. parent's reference frame-->
    <origin xyz="0 0 ${(wheel_radius+wheel_zoff)}" rpy="0 0 0" />
    <child link="chassis"/>
    <parent link="robot_footprint" />
  </joint>

  <!-- ************************** DRIVE WHEELS ***************************** -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
            <mesh filename="package://iBot/meshes/wheel3.obj"/>
        </geometry>
        <transparency>0</transparency>
        <cast_shadows>1</cast_shadows>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <surface>
        <friction>
          <ode>
            <mu>10.0</mu>
            <mu2>5.0</mu2>
          </ode>
        </friction>
      </surface>
      </collision>

      <xacro:cylinder_inertia m="7" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="revolute">
      <parent link="chassis"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(chassis_width/2+wheel_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <limit upper="1e+16" lower="-1e+16" effort="1000" velocity="1000"/>
      <axis xyz="0 1 0"/>
      <dynamics damping="1.0" friction="1.0" spring_reference="0"
        spring_stiffness="0" />
    </joint>
  </xacro:macro>

  <!-- Instantiate four wheels using the macro we just made -->
  <!-- ********************** BACK LEFT WHEEL ****************************** -->
  <xacro:wheel prefix="back_left_wheel" x_reflect="-1" y_reflect="1" />
  <!-- ********************** BACK RIGHT WHEEL ***************************** -->
  <xacro:wheel prefix="back_right_wheel" x_reflect="-1" y_reflect="-1" />
  <!-- ********************** FRONT LEFT WHEEL ***************************** -->
  <xacro:wheel prefix="front_left_wheel" x_reflect="1" y_reflect="1" />
  <!-- ********************** FRONT RIGHT WHEEL **************************** -->
  <xacro:wheel prefix="front_right_wheel" x_reflect="1" y_reflect="-1" />

  <!-- ************************** CAMERA *************************** -->
  <link name="camera">

    <xacro:box_inertia m="0.1" w="${camera_length}" h="${camera_length}" d="${camera_length}"/>

    <visual name="camera_visual">
      <origin xyz="0 0 0" rpy="0 0 ${pi/2}" />
      <geometry>
        <mesh filename="package://iBot/meshes/camera.obj"/>
      </geometry>
      <transparency>0</transparency>
      <cast_shadows>1</cast_shadows>
    </visual>

    <collision name="camera_colision">
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${camera_length} ${camera_length} ${camera_length}"/>
      </geometry>
    </collision>
  </link>

  <joint type="fixed" name="camera_joint">
    <origin xyz="${camera_xoff} ${camera_yoff} ${camera_zoff}" rpy="0 1.5707 0"/>
    <parent link="chassis"/>
    <child link="camera"/>
  </joint>

  <link name="camera_frame"/>

  <joint name="camera_frame_joint" type="fixed">
    <origin xyz="${camera_length/2} 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    <parent link="camera"/>
    <child link="camera_frame"/>
  </joint>

  <!-- ************************** IMU *************************** -->
  <link name="imu">
    <xacro:box_inertia m="0.1" w="${imu_length}" h="${imu_length}" d="${imu_length}"/>

    <visual name="imu_visual">
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${imu_length} ${imu_length} ${imu_length}"/>
      </geometry>
    </visual>

    <collision name="imu_colision">
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${imu_length} ${imu_length} ${imu_length}"/>
      </geometry>
    </collision>
  </link>

  <joint type="fixed" name="imu_joint">
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <parent link="chassis"/>
    <child link="imu"/>
  </joint>

  <gazebo reference="imu">
    <material>Gazebo/Red</material>
  </gazebo>

</robot>

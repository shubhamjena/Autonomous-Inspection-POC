<?xml version="1.0"?>
<robot>

  <!--**************** DIFFERENTIAL DRIVE CONTROLLER *********************** -->
  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <ros>
        <namespace>iBot</namespace>
        <remapping>/cmd_vel:=cmd_vel</remapping>
        <remapping>/odom:=odom</remapping>
      </ros>
      <update_rate>20.0</update_rate>
      <num_wheel_pairs>2</num_wheel_pairs>
      <odometry_frame>odom</odometry_frame>

      <left_joint>front_left_wheel_joint</left_joint>
      <right_joint>front_right_wheel_joint</right_joint>
      <wheel_separation>0.32</wheel_separation>
      <wheel_diameter>0.25</wheel_diameter>
      
      <left_joint>back_left_wheel_joint</left_joint>
      <right_joint>back_right_wheel_joint</right_joint>
      <wheel_separation>0.32</wheel_separation>
      <wheel_diameter>0.25</wheel_diameter>

      <max_wheel_torque>40</max_wheel_torque>
      <max_wheel_acceleration>5.0</max_wheel_acceleration>

      <publish_odom>true</publish_odom>
      <!-- robot_localization package publishes this transform -->
      <publish_odom_tf>false</publish_odom_tf>
      <!-- The robot_state_publisher package is often used to publish this transform -->
      <publish_wheel_tf>true</publish_wheel_tf>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>robot_footprint</robot_base_frame>

      <!-- <odometry_source>world</odometry_source> -->
    </plugin>
  </gazebo>

  <!-- ************************ CAMERA SENSOR ****************************** -->
  <gazebo reference="camera">
    <sensor type="camera" name="camera_sensor">
      <update_rate>30.0</update_rate>
      <always_on>1</always_on>

      <camera name="camera">
        <!-- <horizontal_fov>1.3962634</horizontal_fov> -->
        <horizontal_fov>1.2</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <distortion>
          <k1>0.0</k1>
          <k2>0.0</k2>
          <k3>0.0</k3>
          <p1>0.0</p1>
          <p2>0.0</p2>
          <center>0.5 0.5</center>
        </distortion>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace>/iBot</namespace>
          <remapping>camera/image_raw:=/iBot/camera/image</remapping>
          <remapping>camera/camera_info:=/iBot/camera/image/camera_info</remapping>
        </ros>
        <camera_name>camera</camera_name>
        <frame_name>camera_frame</frame_name>
        <hack_baseline>0.07</hack_baseline>
      </plugin>
    </sensor>
  </gazebo>

  <!-- ************************* IMU SENSOR ******************************** -->
  <gazebo reference="imu">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu">
        <ros>
          <namespace>/iBot</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

  <!-- ********************** JOINT STATE PUBLISHER ************************ -->
  <gazebo>
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
        <namespace>iBot</namespace>
        <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>30</update_rate>
      <joint_name>front_left_wheel_joint</joint_name>
      <joint_name>front_right_wheel_joint</joint_name>
      <joint_name>back_left_wheel_joint</joint_name>
      <joint_name>back_right_wheel_joint</joint_name>
    </plugin>
  </gazebo>

  <!-- ********** GAZEBO-ROS-FORCE PLUGIN FOR SIMULATING EDF THRUST ********** -->
  <gazebo>
    <plugin name="gazebo_ros_force" filename="libgazebo_ros_force.so">
      <ros>
        <namespace>iBot</namespace>
        <remapping>/gazebo_ros_force:=wrench</remapping>
      </ros>
      <update_rate>100</update_rate>
      <always_on>true</always_on>
      <link_name>robot_footprint</link_name>
      <force_frame>link</force_frame>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin filename="libgazebo_ros_p3d.so" name="p3d_base_controller">
      <ros>
        <namespace>/iBot</namespace>
        <argument>odom:=ground_truth</argument>
      </ros>
      <always_on>true</always_on>
      <update_rate>50.0</update_rate>
      <body_name>robot_footprint</body_name>
      <gaussian_noise>0.01</gaussian_noise>
      <frame_name>world</frame_name>
      <xyz_offset>0 0 0</xyz_offset>
      <rpy_offset>0 0 0</rpy_offset>
    </plugin>
  </gazebo>

  <!-- <ros2_control name="GazeboSystem" type="system">
    <hardware>
      <plugin>gazebo_ros2_control/GazeboSystem</plugin>
    </hardware>
    <joint name='front_left_wheel_joint'>
      <command_interface name="position">
        <param name="min">-100</param>
        <param name="max">100</param>
      </command_interface>
      <state_interface name="position" />
      <state_interface name="velocity" />
      <state_interface name="effort" />
    </joint>
    <joint name='front_right_wheel_joint'>
      <command_interface name="position">
        <param name="min">-100</param>
        <param name="max">100</param>
      </command_interface>
      <state_interface name="position" />
      <state_interface name="velocity" />
      <state_interface name="effort" />
    </joint>
    <joint name='back_left_wheel_joint'>
      <command_interface name="position">
        <param name="min">-100</param>
        <param name="max">100</param>
      </command_interface>
      <state_interface name="position" />
      <state_interface name="velocity" />
      <state_interface name="effort" />
    </joint>
    <joint name='back_left_wheel_joint'>
      <command_interface name="position">
        <param name="min">-100</param>
        <param name="max">100</param>
      </command_interface>
      <state_interface name="position" />
      <state_interface name="velocity" />
      <state_interface name="effort" />
    </joint>
  </ros2_control>

  <gazebo>
    <plugin name="gazebo_ros2_control" filename="libgazebo_ros2_control.so">
      <parameters>/home/atharva/ros2/airbus_ws/src/Autonomous-Inspection-POC/simulation/config/iBot_joint_trajectory_controller.yaml</parameters>
    </plugin>
  </gazebo> -->

</robot>